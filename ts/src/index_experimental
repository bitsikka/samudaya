import PeerId from "peer-id";
import { ChatMessage, StoreCodec, Waku } from "js-waku";

const handleProtocolChange = async (
  waku: Waku,
  ChatContentTopic: string,
  { peerId, protocols }: { peerId: PeerId; protocols: string[] }
) => {
  if (protocols.includes(StoreCodec)) {
    console.log(`${peerId.toB58String()}: retrieving archived messages}`);
    try {
      const res = await waku.store.queryHistory({
        peerId,
        contentTopics: [ChatContentTopic],
        pageSize: 5,
      });

      if (res) {
        const messages = res
          .map((wakuMsg) => wakuMsg.payload)
          .filter((payload) => !!payload)
          .map((payload) => ChatMessage.decode(payload as Uint8Array));

        console.log(
          `${peerId.toB58String()}: messages retrieved:`,
          messages.length
        );
        return messages;
      }
    } catch (e) {
      console.log(
        `${peerId.toB58String()}: error encountered when retrieving archived messages`,
        e
      );
    }
  }
};

export default function StatusStream(stateWaku: Waku) {
  stateWaku.libp2p.peerStore.on(
    "change:protocols",
    handleProtocolChange.bind({}, stateWaku)
  );
}
